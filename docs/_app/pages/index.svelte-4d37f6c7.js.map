{"version":3,"file":"index.svelte-4d37f6c7.js","sources":["../../../../../src/lib/pinchZoom.ts","../../../../../src/lib/pzoom.ts","../../../../../src/lib/_components/Spot.svelte","../../../../../src/routes/index.svelte"],"sourcesContent":["// inspired by https://github.com/GoogleChromeLabs/pinch-zoom/blob/master/lib/pinch-zoom.ts\r\n\r\nimport PointerTracker from 'pointer-tracker';\r\nimport type { Pointer } from 'pointer-tracker'; // separate type out to own line\r\nimport './styles.css';\r\n\r\ninterface Point {\r\n\tclientX: number;\r\n\tclientY: number;\r\n}\r\n\r\ninterface ChangeOptions {\r\n\t/**\r\n\t * Fire a 'change' event if values are different to current values\r\n\t */\r\n\tallowChangeEvent?: boolean;\r\n}\r\n\r\ninterface ApplyChangeOpts extends ChangeOptions {\r\n\tpanX?: number;\r\n\tpanY?: number;\r\n\tscaleDiff?: number;\r\n\toriginX?: number;\r\n\toriginY?: number;\r\n}\r\n\r\ninterface SetTransformOpts extends ChangeOptions {\r\n\tscale?: number;\r\n\tx?: number;\r\n\ty?: number;\r\n}\r\n\r\ntype ScaleRelativeToValues = 'container' | 'content';\r\n\r\nconst minScaleAttr = 'min-scale';\r\n\r\nexport interface ScaleToOpts extends ChangeOptions {\r\n\t/** Transform origin. Can be a number, or string percent, eg \"50%\" */\r\n\toriginX?: number | string;\r\n\t/** Transform origin. Can be a number, or string percent, eg \"50%\" */\r\n\toriginY?: number | string;\r\n\t/** Should the transform origin be relative to the container, or content? */\r\n\trelativeTo?: ScaleRelativeToValues;\r\n}\r\n\r\nfunction getDistance(a: Point, b?: Point): number {\r\n\tif (!b) return 0;\r\n\treturn Math.sqrt((b.clientX - a.clientX) ** 2 + (b.clientY - a.clientY) ** 2);\r\n}\r\n\r\nfunction getMidpoint(a: Point, b?: Point): Point {\r\n\tif (!b) return a;\r\n\r\n\treturn {\r\n\t\tclientX: (a.clientX + b.clientX) / 2,\r\n\t\tclientY: (a.clientY + b.clientY) / 2\r\n\t};\r\n}\r\n\r\nfunction getAbsoluteValue(value: string | number, max: number): number {\r\n\tif (typeof value === 'number') return value;\r\n\r\n\tif (value.trimRight().endsWith('%')) {\r\n\t\treturn (max * parseFloat(value)) / 100;\r\n\t}\r\n\treturn parseFloat(value);\r\n}\r\n\r\nfunction createMatrix(): DOMMatrix {\r\n\treturn new DOMMatrix();\r\n}\r\n\r\nfunction createPoint(): DOMPoint {\r\n\treturn new DOMPoint();\r\n}\r\n\r\nconst MIN_SCALE = 0.01;\r\n\r\nexport default class PinchZoom {\r\n\t// The element that we'll transform.\r\n\t// Ideally this would be shadow DOM, but we don't have the browser\r\n\t// support yet.\r\n\tprivate _parentEl?: Element;\r\n\t// Current transform.\r\n\tprivate _transform: DOMMatrix = createMatrix();\r\n\r\n\tstatic get observedAttributes() {\r\n\t\treturn [minScaleAttr];\r\n\t}\r\n\r\n\tconstructor(node: HTMLElement) {\r\n\t\tthis.node = node;\r\n\t\tthis._parentEl = this.node.parentElement || document.body;\r\n\r\n\t\t// Watch for children changes.\r\n\t\t// Note this won't fire for initial contents,\r\n\t\t// so _stageElChange is also called in connectedCallback.\r\n\t\tnew MutationObserver(() => this._stageElChange()).observe(this.node, { childList: true });\r\n\r\n\t\t// Watch for pointers\r\n\t\tconst pointerTracker: PointerTracker = new PointerTracker(this._parentEl, {\r\n\t\t\teventListenerOptions: { capture: true }, // catch the event before it goes to child in the DOM tree\r\n\t\t\tstart: (pointer, event) => {\r\n\t\t\t\tconsole.log('PanZoom Start', { pointer }, pointerTracker.currentPointers.length);\r\n\t\t\t\t// We only want to track 2 pointers at most\r\n\t\t\t\tif (pointerTracker.currentPointers.length === 2 || !this._parentEl) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tevent.preventDefault();\r\n\t\t\t\t\tevent.stopPropagation(); // if it's a 2 touch move, we want exclusive rights over the pointer\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tmove: (previousPointers) => {\r\n\t\t\t\tevent.stopPropagation(); // continue exclusive rights over the pointer from DOM tree\r\n\t\t\t\tthis._onPointerMove(previousPointers, pointerTracker.currentPointers);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._parentEl.addEventListener('wheel', (event) => this._onWheel(event));\r\n\t}\r\n\r\n\tattributeChangedCallback(name: string, oldValue: string, newValue: string) {\r\n\t\tif (name === minScaleAttr) {\r\n\t\t\tif (this.scale < this.minScale) {\r\n\t\t\t\tthis.setTransform({ scale: this.minScale });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget minScale(): number {\r\n\t\tconst attrValue = this.node.getAttribute(minScaleAttr);\r\n\t\tif (!attrValue) return MIN_SCALE;\r\n\r\n\t\tconst value = parseFloat(attrValue);\r\n\t\tif (Number.isFinite(value)) return Math.max(MIN_SCALE, value);\r\n\r\n\t\treturn MIN_SCALE;\r\n\t}\r\n\r\n\tset minScale(value: number) {\r\n\t\tthis.node.setAttribute(minScaleAttr, String(value));\r\n\t}\r\n\r\n\tconnectedCallback() {\r\n\t\tthis._stageElChange();\r\n\t}\r\n\r\n\tget x() {\r\n\t\treturn this._transform.e;\r\n\t}\r\n\r\n\tget y() {\r\n\t\treturn this._transform.f;\r\n\t}\r\n\r\n\tget scale() {\r\n\t\treturn this._transform.a;\r\n\t}\r\n\r\n\t/**\r\n\t * Change the scale, adjusting x/y by a given transform origin.\r\n\t */\r\n\tscaleTo(scale: number, opts: ScaleToOpts = {}) {\r\n\t\tlet { originX = 0, originY = 0 } = opts;\r\n\r\n\t\tconst { relativeTo = 'content', allowChangeEvent = false } = opts;\r\n\r\n\t\tconst relativeToEl = relativeTo === 'content' ? this._parentEl : this.node;\r\n\r\n\t\t// No content element? Fall back to just setting scale\r\n\t\tif (!relativeToEl || !this._parentEl) {\r\n\t\t\tthis.setTransform({ scale, allowChangeEvent });\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst rect = relativeToEl.getBoundingClientRect();\r\n\t\toriginX = getAbsoluteValue(originX, rect.width);\r\n\t\toriginY = getAbsoluteValue(originY, rect.height);\r\n\r\n\t\tif (relativeTo === 'content') {\r\n\t\t\toriginX += this.x;\r\n\t\t\toriginY += this.y;\r\n\t\t} else {\r\n\t\t\tconst currentRect = this._parentEl.getBoundingClientRect();\r\n\t\t\toriginX -= currentRect.left;\r\n\t\t\toriginY -= currentRect.top;\r\n\t\t}\r\n\r\n\t\tthis._applyChange({\r\n\t\t\tallowChangeEvent,\r\n\t\t\toriginX,\r\n\t\t\toriginY,\r\n\t\t\tscaleDiff: scale / this.scale\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Update the stage with a given scale/x/y.\r\n\t */\r\n\tsetTransform(opts: SetTransformOpts = {}) {\r\n\t\tconst { scale = this.scale, allowChangeEvent = false } = opts;\r\n\r\n\t\tlet { x = this.x, y = this.y } = opts;\r\n\r\n\t\t// If we don't have an element to position, just set the value as given.\r\n\t\t// We'll check bounds later.\r\n\t\tif (!this._parentEl) {\r\n\t\t\tthis._updateTransform(scale, x, y, allowChangeEvent);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get current layout\r\n\t\tconst thisBounds = this.node.getBoundingClientRect();\r\n\t\tconst parentElBounds = this._parentEl.getBoundingClientRect();\r\n\r\n\t\t// Not displayed. May be disconnected or display:none.\r\n\t\t// Just take the values, and we'll check bounds later.\r\n\t\tif (!thisBounds.width || !thisBounds.height) {\r\n\t\t\tthis._updateTransform(scale, x, y, allowChangeEvent);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Create points for _parentEl.\r\n\t\tlet topLeft = createPoint();\r\n\t\ttopLeft.x = parentElBounds.left - thisBounds.left;\r\n\t\ttopLeft.y = parentElBounds.top - thisBounds.top;\r\n\t\tlet bottomRight = createPoint();\r\n\t\tbottomRight.x = parentElBounds.width + topLeft.x;\r\n\t\tbottomRight.y = parentElBounds.height + topLeft.y;\r\n\r\n\t\t// Calculate the intended position of _parentEl.\r\n\t\tconst matrix = createMatrix()\r\n\t\t\t.translate(x, y)\r\n\t\t\t.scale(scale)\r\n\t\t\t// Undo current transform\r\n\t\t\t.multiply(this._transform.inverse());\r\n\r\n\t\ttopLeft = topLeft.matrixTransform(matrix);\r\n\t\tbottomRight = bottomRight.matrixTransform(matrix);\r\n\r\n\t\t// Ensure _parentEl can't move beyond out-of-bounds.\r\n\t\t// Correct for x\r\n\t\t// if (topLeft.x > thisBounds.width) {\r\n\t\t// \tx += thisBounds.width - topLeft.x;\r\n\t\t// } else if (bottomRight.x < 0) {\r\n\t\t// \tx += -bottomRight.x;\r\n\t\t// }\r\n\r\n\t\t// Correct for y\r\n\t\t// if (topLeft.y > thisBounds.height) {\r\n\t\t// \ty += thisBounds.height - topLeft.y;\r\n\t\t// } else if (bottomRight.y < 0) {\r\n\t\t// \ty += -bottomRight.y;\r\n\t\t// }\r\n\r\n\t\tthis._updateTransform(scale, x, y, allowChangeEvent);\r\n\t}\r\n\r\n\t/**\r\n\t * Update transform values without checking bounds. This is only called in setTransform.\r\n\t */\r\n\tprivate _updateTransform(scale: number, x: number, y: number, allowChangeEvent: boolean) {\r\n\t\t// Avoid scaling to zero\r\n\t\tif (scale < this.minScale) return;\r\n\r\n\t\t// Return if there's no change\r\n\t\tif (scale === this.scale && x === this.x && y === this.y) return;\r\n\r\n\t\tthis._transform.e = x;\r\n\t\tthis._transform.f = y;\r\n\t\tthis._transform.d = this._transform.a = scale;\r\n\r\n\t\t// this.node.style.setProperty('--x', this.x + 'px');\r\n\t\t// this.node.style.setProperty('--y', this.y + 'px');\r\n\t\t// this.node.style.setProperty('--scale', this.scale + '');\r\n\r\n\t\tthis.node.style.transform = `translate(${x}px,${y}px) scale(${scale})`;\r\n\r\n\t\tif (allowChangeEvent) {\r\n\t\t\tconst event = new Event('change', { bubbles: true });\r\n\t\t\tthis.node.dispatchEvent(event);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Called when the direct children of this element change.\r\n\t * Until we have have shadow dom support across the board, we\r\n\t * require a single element to be the child of <pinch-zoom>, and\r\n\t * that's the element we pan/scale.\r\n\t */\r\n\tprivate _stageElChange() {\r\n\t\tthis._parentEl = this.node.parentElement || document.body;\r\n\r\n\t\t// Do a bounds check\r\n\t\tthis.setTransform({ allowChangeEvent: true });\r\n\t}\r\n\r\n\tprivate _onWheel(event: WheelEvent) {\r\n\t\tif (!this._parentEl) return;\r\n\t\t// if (this._parentEl !== event.target) return;\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tconst currentRect = this._parentEl.getBoundingClientRect();\r\n\t\tlet { deltaY } = event;\r\n\t\tconst { ctrlKey, deltaMode } = event;\r\n\r\n\t\tif (deltaMode === 1) {\r\n\t\t\t// 1 is \"lines\", 0 is \"pixels\"\r\n\t\t\t// Firefox uses \"lines\" for some types of mouse\r\n\t\t\tdeltaY *= 15;\r\n\t\t}\r\n\r\n\t\t// ctrlKey is true when pinch-zooming on a trackpad.\r\n\t\tconst divisor = ctrlKey ? 200 : 600;\r\n\t\tconst scaleDiff = 1 - deltaY / divisor;\r\n\r\n\t\tthis._applyChange({\r\n\t\t\tscaleDiff,\r\n\t\t\toriginX: event.pageX - this._parentEl.offsetLeft - this._parentEl.clientWidth / 2,\r\n\t\t\toriginY: event.pageY - this._parentEl.offsetTop - this._parentEl.clientHeight / 2,\r\n\t\t\tallowChangeEvent: true\r\n\t\t});\r\n\t}\r\n\r\n\tprivate _onPointerMove(previousPointers: Pointer[], currentPointers: Pointer[]) {\r\n\t\tif (!this._parentEl) return;\r\n\r\n\t\t// Combine next points with previous points\r\n\t\tconst currentRect = this._parentEl.getBoundingClientRect();\r\n\r\n\t\t// For calculating panning movement\r\n\t\tconst prevMidpoint = getMidpoint(previousPointers[0], previousPointers[1]);\r\n\t\tconst newMidpoint = getMidpoint(currentPointers[0], currentPointers[1]);\r\n\r\n\t\t// Midpoint within the element\r\n\t\tconst originX = prevMidpoint.clientX - currentRect.left - currentRect.width / 2;\r\n\t\tconst originY = prevMidpoint.clientY - currentRect.top - currentRect.height / 2;\r\n\r\n\t\t// Calculate the desired change in scale\r\n\t\tconst prevDistance = getDistance(previousPointers[0], previousPointers[1]);\r\n\t\tconst newDistance = getDistance(currentPointers[0], currentPointers[1]);\r\n\t\tconst scaleDiff = prevDistance ? newDistance / prevDistance : 1;\r\n\r\n\t\tthis._applyChange({\r\n\t\t\toriginX,\r\n\t\t\toriginY,\r\n\t\t\tscaleDiff,\r\n\t\t\tpanX: newMidpoint.clientX - prevMidpoint.clientX,\r\n\t\t\tpanY: newMidpoint.clientY - prevMidpoint.clientY,\r\n\t\t\tallowChangeEvent: true\r\n\t\t});\r\n\t}\r\n\r\n\t/** Transform the view & fire a change event */\r\n\tprivate _applyChange(opts: ApplyChangeOpts = {}) {\r\n\t\tconst {\r\n\t\t\tpanX = 0,\r\n\t\t\tpanY = 0,\r\n\t\t\toriginX = 0,\r\n\t\t\toriginY = 0,\r\n\t\t\tscaleDiff = 1,\r\n\t\t\tallowChangeEvent = false\r\n\t\t} = opts;\r\n\r\n\t\tconst matrix = createMatrix()\r\n\t\t\t// Translate according to panning.\r\n\t\t\t.translate(panX, panY)\r\n\t\t\t// Scale about the origin.\r\n\t\t\t.translate(originX, originY)\r\n\t\t\t// Apply current translate\r\n\t\t\t// .translate(this.x, this.y) // moved to line below vvv\r\n\t\t\t.scale(scaleDiff)\r\n\t\t\t.translate(-originX, -originY)\r\n\t\t\t// Apply current transform.\r\n\t\t\t.multiply(this._transform);\r\n\r\n\t\t// Convert the transform into basic translate & scale.\r\n\t\tthis.setTransform({\r\n\t\t\tallowChangeEvent,\r\n\t\t\tscale: matrix.a,\r\n\t\t\tx: matrix.e,\r\n\t\t\ty: matrix.f\r\n\t\t});\r\n\t}\r\n}\r\n","import pinchZoom from './pinchZoom';\r\n\r\nexport const pzoom = (node, params = {}) => {\r\n\tlet container = node.parentElement || document.body;\r\n\r\n\t// ensure touch and select action defaults are disable\r\n\tcontainer.style['touch-action'] = 'none';\r\n\tcontainer.style['user-select'] = 'none';\r\n\tcontainer.style['overflow'] = 'hidden';\r\n\tcontainer.style['position'] = 'relative';\r\n\r\n\tnode.style['touch-action'] = 'none';\r\n\tnode.style['user-select'] = 'none';\r\n\tnode.style['position'] = 'absolute';\r\n\r\n\t// node.style['transform'] = 'translate(var(--x), var(--y)) scale(var(--scale))';\r\n\t// node.style['transform-origin'] = '0 0';\r\n\t// node.style['will-change'] = 'transform';\r\n\r\n\tnew pinchZoom(node as HTMLElement);\r\n};\r\n","<script>\r\n\tlet range = 9;\r\n\texport let left = ((1 << range) * Math.random()) | 10;\r\n\texport let top = ((1 << range) * Math.random()) | 10;\r\n\r\n\tlet color = '#' + (((1 << 24) * Math.random()) | 4095).toString(16);\r\n</script>\r\n\r\n<div style=\"top: {top}px; left: {left}px; --color: {color};\">\r\n\t<!-- {left},{top} -->\r\n</div>\r\n\r\n<style>\r\n\tdiv {\r\n\t\t--size: 20px;\r\n\t\tposition: absolute;\r\n\t\tbackground-color: var(--color);\r\n\t\tborder: 1px solid #00000049;\r\n\t\twidth: var(--size);\r\n\t\theight: var(--size);\r\n\t}\r\n</style>\r\n","<script>\n\timport { panzoom } from '$lib/panzoom.js';\n\timport { pzoom } from '$lib/pzoom';\n\timport Spot from '$lib/_components/Spot.svelte';\n\timport RangeSlider from 'svelte-range-slider-pips';\n\n\tlet zoomable, container;\n\tlet style = ''; // show styling applied\n\tlet scale = { value: 1 };\n\tlet count = 10;\n\tlet min = count;\n\tlet manualZoom = [1];\n\t// $: if (scale?.value) manualZoom = [scale.value]; // match the directive scale level\n\t$: if (manualZoom) {\n\t\tconsole.log({ manualZoom });\n\t\tsetZoom(manualZoom);\n\t}\n\n\tfunction handleZoom(e) {\n\t\tconsole.log('Zoomed.', { detail: e.detail });\n\t\tscale = e.detail.scale;\n\t\tstyle = zoomable.style.transform;\n\t}\n\n\tconst grid = Array.from({ length: count }, (_, i) =>\n\t\tArray.from({ length: count }, (_, j) => ({ id: i * count + j }))\n\t);\n\n\t// manual zoom\n\tfunction setZoom(val) {\n\t\tconsole.log('Zoom to ', val, zoomable?.style['transform']);\n\t\tif (!zoomable) return;\n\t\tif (!zoomable?.style) {\n\t\t\tconsole.log('Setting Zoom to scale only');\n\t\t\tzoomable.style['transform'] = `scale(${val})`;\n\t\t\treturn;\n\t\t}\n\t\tlet m;\n\t\tlet s = '';\n\n\t\tconst re = /(\\w+)\\(([^)]*)\\)/g;\n\t\twhile ((m = re.exec(zoomable?.style['transform']))) {\n\t\t\tconsole.log({ m });\n\n\t\t\tif (m[1] == 'matrix') {\n\t\t\t\tlet piece = m[2].split(', ');\n\t\t\t\tconsole.log({ piece });\n\t\t\t\ts = `translate(${piece[4]}px, ${piece[5]}px) scale(${val})`;\n\t\t\t\tconsole.log('matrixed', { s });\n\t\t\t\tzoomable.style['transform'] = s;\n\t\t\t\treturn;\n\t\t\t} else if (m[1] == 'scale') {\n\t\t\t\ts += ` scale(${val})`;\n\t\t\t} else {\n\t\t\t\ts += m[0];\n\t\t\t}\n\t\t}\n\t\tconsole.log({ s });\n\t\tzoomable.style['transform'] = s;\n\t}\n</script>\n\n<div>\n\t<h1>Pan and Zoom</h1>\n\t<p>Try out the mouse wheel scroll in the red box below</p>\n\n\t<h2>Inside</h2>\n\t<p>Inside the red box should pan and zoom</p>\n</div>\n\n<div class=\"container\" bind:this={container}>\n\t<div class=\"menu\">\n\t\t<div>\n\t\t\tZoom Level: {scale.value.toFixed(5)} || {JSON.stringify(manualZoom)}\n\t\t\t{#if manualZoom}\n\t\t\t\t<div>\n\t\t\t\t\t<RangeSlider\n\t\t\t\t\t\tpips\n\t\t\t\t\t\tmin={0.5}\n\t\t\t\t\t\tstep={0.5}\n\t\t\t\t\t\tmax={scale?.max || 20}\n\t\t\t\t\t\tfloat\n\t\t\t\t\t\tbind:values={manualZoom}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t{/if}\n\t\t</div>\n\n\t\t<div>Style: {style}</div>\n\t</div>\n\t<div class=\"zoomable flexbox\" bind:this={zoomable} use:pzoom on:zoomed={handleZoom}>\n\t\t{#if container}\n\t\t\t<div class=\"grid\">\n\t\t\t\t{#each grid as col, x}\n\t\t\t\t\t<div class=\"col\">\n\t\t\t\t\t\t{#each col as square, y}\n\t\t\t\t\t\t\t<Spot\n\t\t\t\t\t\t\t\tleft={min + (x * container.offsetWidth) / count}\n\t\t\t\t\t\t\t\ttop={min + (y * container.offsetWidth) / count}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\t\t\t</div>\n\t\t{/if}\n\t</div>\n</div>\n\n<style>\n\t.container {\n\t\tborder: 3px solid red;\n\t\theight: 600px;\n\t\twidth: 600px;\n\t\tmargin: 3em;\n\t\t/* overflow: hidden;  its set by the directive :) */\n\t\t/* touch-action: none;  its set by the directive :) */\n\t\t/* position: relative; its set by the directive :) */\n\t}\n\t.zoomable {\n\t\tborder: 4px dashed blue;\n\t\theight: 100%;\n\t\twidth: 100%;\n\t\t/* margin: 1em; */\n\t\t/* position: relative; its set by the directive :) */\n\t}\n\t.flexbox {\n\t\tdisplay: flex;\n\t\tflex-wrap: nowrap;\n\t\talign-content: stretch;\n\t\tjustify-content: space-evenly;\n\t\talign-items: stretch;\n\t}\n\t.flexitem {\n\t\tmargin: 1em;\n\t\tpadding: 1em;\n\t\tbackground-color: lightgray;\n\t}\n\t.item {\n\t\t/* \t\tflex: 1; */\n\t\tborder: 1px solid grey;\n\t\theight: 30px;\n\t\twidth: 50px;\n\t}\n\tul {\n\t\tpadding: 1em;\n\t}\n\n\t.menu {\n\t\tposition: absolute;\n\t\ttop: 10px;\n\t\tleft: 10px;\n\t\tmargin: 0.1em;\n\t\tpadding: 2em;\n\t\tz-index: 10;\n\t\tbackground-color: rgba(133, 198, 255, 0.801);\n\t}\n</style>\n"],"names":["pinchZoom"],"mappings":"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"}